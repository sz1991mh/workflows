name: learn-github-actions
run-name: ${{ github.actor }} is learning GitHub Actions
on:
  push:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run against'
        type: environment
        required: false

jobs:
  check-go-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3.5.0
        with:
          go-version: '1.19'
      - run: go version

  issue-cert:
    name: Issue SSL certificate
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'staging' }}
    container:
      image: neilpang/acme.sh
      env:
        NODE_ENV: development
        SECRET_HOSTS: ${{ secrets.HOSTS }}

    outputs:
      ACME_SH_CERT_PACK: ${{ steps.output_step.outputs.ACME_SH_CERT_PACK }}

    steps:
      - name: acme.sh
        run: |
          DOMAINS=$(echo $ACME_SH_COMMANDS | jq -r ".issue_args" | tr "$IFS" "\n" | sed 's/^"//g; s/"$//g' | grep -Eo "\w+\.\w+$" | sort -u)
          for DOMAIN in $DOMAINS
          do
            echo "::add-mask::$DOMAIN"
          done

          echo "$ACME_SH_ACCOUNT_TAR" | base64 -d | tar -C $LE_CONFIG_HOME -xz

          echo $(echo $ACME_SH_COMMANDS | jq -r ".issue_args")
          echo $(echo $ACME_SH_COMMANDS | jq -r ".install_args")

          acme.sh --issue $(echo $ACME_SH_COMMANDS | jq -r ".issue_args")
          acme.sh --install-cert $(echo $ACME_SH_COMMANDS | jq -r ".install_args") --key-file $GITHUB_WORKSPACE/key.key --fullchain-file $GITHUB_WORKSPACE/cert.crt
        env:
          ACME_SH_ACCOUNT_TAR: ${{ secrets.ACME_SH_ACCOUNT_TAR }}
          ACME_SH_COMMANDS: ${{ secrets.ACME_SH_COMMANDS }}

      - name: output
        id: output_step
        run: |
          cd $GITHUB_WORKSPACE
          
          # Bug for https://github.com/community/community/discussions/37942
          # workaround by encode before set output
          echo "ACME_SH_CERT_PACK<<EOF" >> $GITHUB_OUTPUT
          echo $(tar cz key.key cert.crt | base64 -w0) >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT


  deploy-cert:
    name: deploy SSL certificate
    needs: issue-cert
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'staging' }}
    container:
      image: alpine
      env:
        NODE_ENV: development
        SECRET_HOSTS: ${{ secrets.HOSTS }}
    steps:
      - name: deploy_hosts
        run: |
          
          echo ${{ needs.issue-cert.outputs.ACME_SH_CERT_PACK }} | base64 -d | tar -C $GITHUB_WORKSPACE -xz
          
          ls -l $GITHUB_WORKSPACE/*
          
          apk update 
          apk add openssh-client
          
          mkdir -p $HOME/.ssh
          echo $SSH_KEY > $HOME/.ssh/SSH_KEY
          chmod 600 $HOME/.ssh/SSH_KEY
          
          eval $(ssh-agent)
          ssh-add $HOME/.ssh/SSH_KEY
          
          for HOST in $SECRET_HOSTS
          do
            echo "::add-mask::$HOST"
            ssh-keyscan -H -t ed25519 $HOST >> $HOME/.ssh/known_hosts
          done
          
          for HOST in $SECRET_HOSTS
          do
            scp $GITHUB_WORKSPACE/key.key $GITHUB_WORKSPACE/cert.crt $SSH_USER@$HOST:~/
            ssh $SSH_USER@$HOST "hostname; ls -l"
          done
          
        env:
          SECRET_HOSTS: ${{ secrets.HOSTS }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
          SSH_USER: ${{ secrets.SSH_USER }}

